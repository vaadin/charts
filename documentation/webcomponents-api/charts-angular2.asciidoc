---
title: Angular 2 integration
order: 9
layout: page
---

[[charts.angular2.introduction]]
= Angular 2 integration

Since Vaadin Charts are built using Polymer, you need the [literal]#https://github.com/vaadin/angular2-polymer[@vaadin/angular2-polymer]# directive to enable seamless usage within Angular 2 applications.


[[charts.angular2.installation]]
== Installation

Follow the steps in [literal]#https://vaadin.com/docs/-/part/elements/angular2-polymer/overview.html[Vaadin Elements: Angular 2 Integration]# to install and enable the use of Vaadin Charts in Angular 2.
[IMPORTANT]
====
In the section 3, where you are importing Angular 2 directives, you need to change the [classname]#CUSTOM_ELEMENTS_SCHEMA# to [classname]#NO_ERRORS_SCHEMA#.
====
[source,typescript,subs="normal"]
.app/app.module.ts
----
import { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { PolymerElement } from '@vaadin/angular2-polymer';
import { AppComponent } from './app.component';

@NgModule({
  imports: +++[+++ BrowserModule +++]+++,
  declarations: +++[+++
    AppComponent,
    PolymerElement('[replaceable]#chart-name#')
  +++]+++,
  bootstrap: +++[+++ AppComponent +++]+++,
  schemas: +++[+++ NO_ERRORS_SCHEMA +++]+++
})
export class AppModule { }
----

[[charts.angular2.usage]]
== Usage

To use Vaadin Charts in an Angular 2 component, you can use Elements API to create a Vaadin chart

[source]
----
@Component({
  selector: 'app-component',
  template: `
    <vaadin-line-chart>
      <chart-title>Fibonacci</chart-title>
      <x-axis><title>Index</title></x-axis>
      <y-axis><title>Value</title></y-axis>
      <data-series>
        <data>1, 1, 2, 3, 5, 8, 13, 21, 34</data>
      </data-series>
    </vaadin-line-chart>
  `
})
----

[[charts.angular2.databinding]]
== Data Binding

To use data binding for Vaadin Charts, you need to set data as an attribute for
[elementname]#data-series#, data binding is not supported when setting data as a tag.
Vaadin Charts support both data binding and template syntax for data series:

[source]
----
// Data binding example
<data-series name="Tokyo" [data]="data">
</data-series>

// Template syntax example
<data-series name="Berlin" [data]="tempInput.value">
</data-series>
----

You can also use `ngFor` and `ngIf` directives with Vaadin Charts:

[source]
----
import {Component} from '@angular/core';

@Component({
  selector: 'my-component',
  template: `
    <div (click)="addPoint()">Add point</div>

    <vaadin-line-chart id="chartid">
      <chart-title>
        Your chart title
      </chart-title>
      <data-series>
        <data>
          <point *ngFor="let point of points">
            <x>{{point.x}}</x>
            <y>{{point.y}}</y>
            <color *ngIf="points.length>3">#FF0000</color>
            </point>
        </data>
      </data-series>
    </vaadin-line-chart>
  `
})

export class AppComponent {
  points:Array<any> = [{x:10,y:10},{x:20,y:20}];
  addPoint(){
    var value = Math.floor(Math.random()*100);
      this.points.push({x:value,y:value});
  }
}
----

[[charts.angular2.events]]
== Events

To use Vaadin Charts events, use http://demo.vaadin.com/vaadin-charts-api/#events[Vaadin Charts elements API] inside template.
You can use the Angular 2 events template syntax with Vaadin Charts:

[source]
----
import {Component} from '@angular/core';

@Component({
  selector: 'my-component',
  template: `
    <vaadin-line-chart (click)="onClickMe()">
    </vaadin-line-chart>
  `
})

export class AppComponent {
  onClickMe(){
    console.log('Chart was clicked!');
  }
}
----
